<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minter App</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Inter Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --background-color-light: #f3f4f6;
            --text-color-light: #111827;
            --primary-color-light: #4f46e5;
            --secondary-color-light: #e5e7eb;
            --link-color-light: #1d4ed8;

            --background-color-dark: #121212;
            --text-color-dark: #e5e7eb;
            --primary-color-dark: #6366f1;
            --secondary-color-dark: #202020;
            --link-color-dark: #60a5fa;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color-light);
            color: var(--text-color-light);
            transition: background-color 0.3s, color 0.3s;
        }
        
        body.dark {
            background-color: var(--background-color-dark);
            color: var(--text-color-dark);
        }

        .dark .bg-gray-800 {
            background-color: var(--secondary-color-dark);
        }

        .dark .text-white {
            color: var(--text-color-dark);
        }

        .dark .bg-white {
            background-color: var(--secondary-color-dark);
            color: var(--text-color-dark);
        }

        .dark .bg-black {
            background-color: var(--text-color-dark);
            color: var(--background-color-dark);
        }
        
        .dark .hover\:bg-gray-200:hover {
            background-color: var(--background-color-dark);
            color: var(--text-color-dark);
        }

        .dark .hover\:bg-white:hover {
            background-color: var(--background-color-dark);
            color: var(--text-color-dark);
        }

        .dark .border-white {
            border-color: var(--text-color-dark);
        }

        .dark .text-blue-400 {
            color: var(--link-color-dark);
        }

        .dark .border-gray-700 {
            border-color: #374151;
        }

        /* Utility classes for dynamic page switching */
        .page {
            display: none;
        }
        .page.active {
            display: block;
        }
        
        /* Three.js canvas */
        #three-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.1;
            pointer-events: none;
        }

        /* Modals */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal.show {
            display: flex;
        }
        .modal-content {
            background: #1f2937;
            padding: 2rem;
            border-radius: 1rem;
            width: 90%;
            max-width: 500px;
            color: white;
            position: relative;
        }
        .modal-close-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
        }
        .modal-close-button:hover {
            color: #d1d5db;
        }

        /* Bottom Navigation */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #1f2937;
            color: #d1d5db;
            display: flex;
            justify-content: space-around;
            padding: 1rem 0;
            border-top: 1px solid #374151;
            z-index: 50;
        }
        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            transition: color 0.2s;
        }
        .nav-item:hover, .nav-item.active {
            color: #4f46e5;
        }
        .nav-item .icon {
            font-size: 1.5rem;
            margin-bottom: 0.25rem;
        }
        .nav-item .label {
            font-size: 0.75rem;
        }
        .nav-item .orders-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: #ef4444;
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 0.7rem;
            font-weight: bold;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-900 transition-colors duration-300">
    <div id="three-container"></div>
    <div class="container mx-auto p-4 md:p-8 relative min-h-screen">
        <!-- Main Application Header -->
        <header class="flex justify-between items-center py-4 mb-8">
            <h1 class="text-3xl font-bold">Minter</h1>
            <div class="flex items-center space-x-4">
                <!-- Theme Toggle -->
                <button id="theme-toggle" class="bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200 p-2 rounded-full shadow-md">
                    <i id="theme-icon" class="fas fa-moon"></i>
                </button>
            </div>
        </header>

        <!-- Welcome Page -->
        <main id="welcome-page" class="page text-center max-w-lg mx-auto">
            <div class="flex flex-col items-center justify-center min-h-screen -mt-24">
                <img src="https://placehold.co/200x200/4f46e5/ffffff?text=Minter+Logo" alt="Minter Logo" class="w-32 h-32 rounded-full mb-8">
                <h2 class="text-4xl font-bold mb-4">Welcome to Minter</h2>
                <p class="text-lg text-gray-600 dark:text-gray-400 mb-8">Your peer-to-peer marketplace for skills and services.</p>
                <button class="bg-black text-white px-8 py-3 rounded-md font-semibold text-lg hover:bg-gray-800 transition-colors" onclick="showPage('signin-page')">Get Started</button>
            </div>
        </main>

        <!-- Sign In Page -->
        <main id="signin-page" class="page active max-w-md mx-auto py-16">
            <h2 class="text-3xl font-bold text-center mb-6">Sign In / Sign Up</h2>
            <form id="signin-form" class="space-y-4">
                <div>
                    <label for="phone-number" class="block text-sm font-medium mb-1">Phone Number</label>
                    <input type="tel" id="phone-number" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="+251912345678" required>
                </div>
                <button type="submit" class="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">Continue</button>
            </form>
            <div id="signin-message" class="mt-4 text-center text-red-500 hidden"></div>
        </main>

        <!-- Home Page -->
        <main id="home-page" class="page max-w-4xl mx-auto py-8">
            <h2 class="text-3xl font-bold mb-6">Dashboard</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Welcome Card -->
                <div class="p-6 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md flex flex-col justify-between">
                    <div>
                        <h3 class="text-xl font-semibold mb-2">Welcome Back!</h3>
                        <p class="text-gray-600 dark:text-gray-400">Manage your skills and orders with ease.</p>
                    </div>
                    <div class="mt-4">
                        <button class="bg-black text-white px-6 py-2 rounded-md font-semibold hover:bg-gray-800 transition-colors" onclick="showPage('orders-page')">View My Orders</button>
                    </div>
                </div>
                <!-- Marketplace Card -->
                <div class="p-6 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md flex flex-col justify-between">
                    <div>
                        <h3 class="text-xl font-semibold mb-2">Explore the Marketplace</h3>
                        <p class="text-gray-600 dark:text-gray-400">Discover and buy services from other minters.</p>
                    </div>
                    <div class="mt-4">
                        <button class="bg-black text-white px-6 py-2 rounded-md font-semibold hover:bg-gray-800 transition-colors" onclick="showPage('marketplace-page')">Browse</button>
                    </div>
                </div>
            </div>
            <!-- Dynamic content -->
        </main>

        <!-- Marketplace Page -->
        <main id="marketplace-page" class="page max-w-4xl mx-auto py-8">
            <h2 class="text-3xl font-bold mb-6">Marketplace</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Minters Section -->
                <section class="col-span-full">
                    <h3 class="text-xl font-semibold mb-4">Minters</h3>
                    <div id="minters-list" class="space-y-4">
                        <!-- Minter items will be injected here -->
                    </div>
                </section>
                <hr class="col-span-full my-4 border-gray-700">
                <!-- Purchased Section -->
                <section class="col-span-full">
                    <h3 class="text-xl font-semibold mb-4">My Purchased</h3>
                    <div id="purchased-list" class="space-y-4">
                        <!-- Purchased items will be injected here -->
                    </div>
                </section>
            </div>
        </main>

        <!-- Orders Page -->
        <main id="orders-page" class="page max-w-4xl mx-auto py-8">
            <h2 class="text-3xl font-bold mb-6">My Orders</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Minted by Me Section -->
                <section>
                    <h3 class="text-xl font-semibold mb-4">Minted by Me</h3>
                    <div id="minted-list" class="space-y-4">
                        <!-- Minted items will be injected here -->
                    </div>
                </section>
                <!-- Incoming Orders Section -->
                <section>
                    <h3 class="text-xl font-semibold mb-4">Incoming Orders</h3>
                    <div id="orders-list" class="space-y-4">
                        <!-- Orders items will be injected here -->
                    </div>
                </section>
            </div>
        </main>

        <!-- Profile Page -->
        <main id="profile-page" class="page max-w-2xl mx-auto py-8">
            <h2 class="text-3xl font-bold text-center mb-6">Profile</h2>
            <form id="profile-form" class="space-y-6">
                <!-- Profile photo and user details section -->
                <div class="p-6 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md space-y-4">
                    <div class="flex flex-col items-center mb-4">
                        <label for="profile-photo-upload" class="relative w-24 h-24 rounded-full bg-gray-300 dark:bg-gray-700 overflow-hidden flex items-center justify-center cursor-pointer mb-2">
                            <img id="profile-photo-preview" class="absolute w-full h-full object-cover hidden" alt="Profile Photo">
                            <span id="profile-photo-plus-icon" class="text-5xl text-gray-500">+</span>
                            <input type="file" id="profile-photo-upload" class="hidden" accept="image/*">
                        </label>
                        <p class="text-sm text-gray-500">Click to upload photo</p>
                    </div>
                    <div>
                        <label for="profile-full-name" class="block text-sm font-medium mb-1">Full Name</label>
                        <input type="text" id="profile-full-name" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="John Doe" required>
                    </div>
                    <div>
                        <label for="profile-phone" class="block text-sm font-medium mb-1">Phone Number</label>
                        <input type="tel" id="profile-phone" class="w-full px-4 py-2 bg-gray-300 dark:bg-gray-700 rounded-md border border-gray-300 dark:border-gray-700 cursor-not-allowed" readonly>
                    </div>
                    <div>
                        <label for="profile-email" class="block text-sm font-medium mb-1">Email</label>
                        <input type="email" id="profile-email" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="john.doe@example.com">
                    </div>
                    <div>
                        <label for="profile-portfolio-url" class="block text-sm font-medium mb-1">Portfolio URL</label>
                        <input type="url" id="profile-portfolio-url" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="https://johndoe.com">
                    </div>
                </div>

                <!-- Mint Skill section -->
                <div class="p-6 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md space-y-4">
                    <h3 class="text-xl font-semibold mb-2">Mint a Skill</h3>
                    <div>
                        <label for="profile-skill" class="block text-sm font-medium mb-1">Skill Name</label>
                        <input type="text" id="profile-skill" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., UI/UX Design" required>
                    </div>
                    <div>
                        <label for="profile-skill-price" class="block text-sm font-medium mb-1">Price per Hour (USD)</label>
                        <input type="number" id="profile-skill-price" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="50" step="0.01" required>
                    </div>
                    <div>
                        <label for="profile-skill-hour" class="block text-sm font-medium mb-1">Hours</label>
                        <input type="number" id="profile-skill-hour" class="w-full px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="2" required>
                    </div>
                    <button type="submit" class="w-full bg-black text-white font-semibold py-2 px-4 rounded-md hover:bg-gray-800 transition-colors">Mint Skill</button>
                    <div id="profile-message" class="mt-4 text-center hidden"></div>
                </div>
            </form>
            <button onclick="handleLogout()" class="w-full mt-8 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700 transition-colors">Log Out</button>
        </main>
        
        <!-- Buy Modal -->
        <div id="buy-modal" class="modal">
            <div class="modal-content">
                <span class="modal-close-button" onclick="closeBuyModal()">&times;</span>
                <h3 class="text-2xl font-bold mb-4">Confirm Purchase</h3>
                <div id="buy-form">
                    <p class="text-gray-400 mb-4">You are about to buy <strong id="modal-skill"></strong> for $<strong id="modal-price"></strong>.</p>
                    <form onsubmit="event.preventDefault(); processBuyPayment();" class="space-y-4">
                        <div>
                            <label for="buyer-name" class="block text-sm font-medium mb-1">Full Name</label>
                            <input type="text" id="buyer-name" class="w-full px-4 py-2 bg-gray-800 rounded-md" placeholder="Your Name" required>
                        </div>
                        <div>
                            <label for="buyer-email" class="block text-sm font-medium mb-1">Email</label>
                            <input type="email" id="buyer-email" class="w-full px-4 py-2 bg-gray-800 rounded-md" placeholder="your.email@example.com" required>
                        </div>
                        <div>
                            <label for="buyer-phone" class="block text-sm font-medium mb-1">Phone Number</label>
                            <input type="tel" id="buyer-phone" class="w-full px-4 py-2 bg-gray-800 rounded-md" placeholder="+251912345678" required>
                        </div>
                        <button type="submit" id="buy-pay-button" class="w-full bg-purple-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-purple-700 transition-colors">Pay with Chapa</button>
                    </form>
                </div>
                <div id="buy-status" class="hidden text-center">
                    <p id="buy-status-message" class="mb-4"></p>
                    <button id="closeBuyStatusButton" onclick="closeBuyModal()" class="bg-gray-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-gray-700 transition-colors">Close</button>
                </div>
            </div>
        </div>

        <!-- Sell Modal -->
        <div id="sell-modal" class="modal">
            <div class="modal-content">
                <span class="modal-close-button" onclick="closeSellModal()">&times;</span>
                <h3 class="text-2xl font-bold mb-4">Sell Your Skill</h3>
                <div id="sell-form">
                    <form onsubmit="event.preventDefault(); processSell();" class="space-y-4">
                        <div>
                            <label for="sell-skill-name" class="block text-sm font-medium mb-1">Skill Name</label>
                            <input type="text" id="sell-skill-name" class="w-full px-4 py-2 bg-gray-800 rounded-md" placeholder="e.g., Python Scripting" required>
                        </div>
                        <div>
                            <label for="sell-price" class="block text-sm font-medium mb-1">Asking Price (USD)</label>
                            <input type="number" id="sell-price" class="w-full px-4 py-2 bg-gray-800 rounded-md" step="0.01" required>
                        </div>
                        <div>
                            <label for="sell-description" class="block text-sm font-medium mb-1">Description</label>
                            <textarea id="sell-description" class="w-full px-4 py-2 bg-gray-800 rounded-md" rows="3" placeholder="Briefly describe the skill you are selling..."></textarea>
                        </div>
                        <button type="submit" id="sell-submit-button" class="w-full bg-purple-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-purple-700 transition-colors">List for Sale</button>
                    </form>
                </div>
                <div id="sell-status" class="hidden text-center">
                    <p id="sell-status-message" class="mb-4"></p>
                    <button id="closeSellStatusButton" onclick="closeSellModal()" class="bg-gray-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-gray-700 transition-colors">Close</button>
                </div>
            </div>
        </div>

        <!-- Order Modal -->
        <div id="order-modal" class="modal">
            <div class="modal-content">
                <span class="modal-close-button" onclick="closeOrderModal()">&times;</span>
                <h3 class="text-2xl font-bold mb-4">Place an Order</h3>
                <div id="order-form">
                    <form onsubmit="event.preventDefault(); processOrder();" class="space-y-4">
                        <div>
                            <label for="order-skill-needed" class="block text-sm font-medium mb-1">Skill</label>
                            <input type="text" id="order-skill-needed" class="w-full px-4 py-2 bg-gray-800 rounded-md" readonly>
                        </div>
                        <div>
                            <label for="order-desired-price" class="block text-sm font-medium mb-1">Price</label>
                            <input type="number" id="order-desired-price" class="w-full px-4 py-2 bg-gray-800 rounded-md" readonly>
                        </div>
                        <div>
                            <label for="order-skill-provider" class="block text-sm font-medium mb-1">Provider</label>
                            <input type="text" id="order-skill-provider" class="w-full px-4 py-2 bg-gray-800 rounded-md" readonly>
                        </div>
                        <div>
                            <label for="order-requirements" class="block text-sm font-medium mb-1">Requirements</label>
                            <textarea id="order-requirements" class="w-full px-4 py-2 bg-gray-800 rounded-md" rows="4" placeholder="Describe your specific requirements for this order..." required></textarea>
                        </div>
                        <button type="submit" id="order-submit-button" class="w-full bg-purple-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-purple-700 transition-colors">Place Order</button>
                    </form>
                </div>
                <div id="order-status" class="hidden text-center">
                    <p id="order-status-message" class="mb-4"></p>
                    <button id="closeOrderStatusButton" onclick="closeOrderModal()" class="bg-gray-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-gray-700 transition-colors">Close</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Bottom Navigation -->
    <nav id="bottom-nav" class="bottom-nav hidden">
        <div class="nav-item" onclick="showPage('home-page')">
            <i class="icon fas fa-home"></i>
            <span class="label">Home</span>
        </div>
        <div class="nav-item" onclick="showPage('marketplace-page')">
            <i class="icon fas fa-store"></i>
            <span class="label">Marketplace</span>
        </div>
        <div id="orders-nav-item" class="nav-item relative" onclick="showPage('orders-page')">
            <i class="icon fas fa-clipboard-list"></i>
            <span class="label">Orders</span>
            <span id="new-orders-badge" class="orders-badge hidden">0</span>
        </div>
        <div class="nav-item" onclick="showPage('profile-page')">
            <i class="icon fas fa-user"></i>
            <span class="label">Profile</span>
        </div>
    </nav>
    
    <!-- Three.js CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script>
        // Data and State
        let appData = {
            users: [
                { phone: '+251912345678', fullName: 'John Doe', email: 'john.doe@example.com', profilePhoto: null, portfolioUrl: 'https://johndoe.com' }
            ],
            marketplace: {
                minters: [
                    { id: 'm1', name: 'John Doe', skill: 'UI/UX Design', hour: 2, price: 50, portfolioUrl: 'https://johndoe.com' },
                    { id: 'm2', name: 'Jane Smith', skill: 'Web Development', hour: 3, price: 75, portfolioUrl: 'https://janesmith.dev' }
                ],
                purchased: [],
                minted: [
                    { id: 'm1', name: 'John Doe', skill: 'UI/UX Design', hour: 2, price: 50, status: 'Published' }
                ],
                orders: []
            }
        };
        let currentUserPhone = null;
        let newOrdersCount = 0;
        
        // DOM Elements
        const pages = document.querySelectorAll('.page');
        const bottomNav = document.getElementById('bottom-nav');
        const signinForm = document.getElementById('signin-form');
        const phoneNumberInput = document.getElementById('phone-number');
        const signinMessage = document.getElementById('signin-message');
        const profileForm = document.getElementById('profile-form');
        const profileFullNameInput = document.getElementById('profile-full-name');
        const profilePhoneInput = document.getElementById('profile-phone');
        const profileEmailInput = document.getElementById('profile-email');
        const profileSkillInput = document.getElementById('profile-skill');
        const profileSkillPriceInput = document.getElementById('profile-skill-price');
        const profileSkillHourInput = document.getElementById('profile-skill-hour');
        const profilePortfolioUrlInput = document.getElementById('profile-portfolio-url');
        const profileMessage = document.getElementById('profile-message');
        const mintersList = document.getElementById('minters-list');
        const purchasedList = document.getElementById('purchased-list');
        const mintedList = document.getElementById('minted-list');
        const ordersList = document.getElementById('orders-list');
        const buyModal = document.getElementById('buy-modal');
        const modalSkill = document.getElementById('modal-skill');
        const modalPrice = document.getElementById('modal-price');
        const buyerNameInput = document.getElementById('buyer-name');
        const buyerEmailInput = document.getElementById('buyer-email');
        const buyerPhoneInput = document.getElementById('buyer-phone');
        const buyForm = document.getElementById('buy-form');
        const buyStatus = document.getElementById('buy-status');
        const buyStatusMessage = document.getElementById('buy-status-message');
        const buyPayButton = document.getElementById('buy-pay-button');
        const sellModal = document.getElementById('sell-modal');
        const sellForm = document.getElementById('sell-form');
        const sellStatus = document.getElementById('sell-status');
        const sellStatusMessage = document.getElementById('sell-status-message');
        const sellSkillNameInput = document.getElementById('sell-skill-name');
        const sellPriceInput = document.getElementById('sell-price');
        const sellDescriptionInput = document.getElementById('sell-description');
        const sellSubmitButton = document.getElementById('sell-submit-button');
        const orderModal = document.getElementById('order-modal');
        const orderForm = document.getElementById('order-form');
        const orderStatus = document.getElementById('order-status');
        const orderStatusMessage = document.getElementById('order-status-message');
        const orderSkillNeededInput = document.getElementById('order-skill-needed');
        const orderDesiredPriceInput = document.getElementById('order-desired-price');
        const orderSkillProviderInput = document.getElementById('order-skill-provider');
        const orderRequirementsInput = document.getElementById('order-requirements');
        const orderSubmitButton = document.getElementById('order-submit-button');
        const profilePhotoUpload = document.getElementById('profile-photo-upload');
        const profilePhotoPreview = document.getElementById('profile-photo-preview');
        const profilePhotoPlusIcon = document.getElementById('profile-photo-plus-icon');
        const newOrdersBadge = document.getElementById('new-orders-badge');
        const themeToggle = document.getElementById('theme-toggle');
        const themeIcon = document.getElementById('theme-icon');

        // --- Data Persistence ---
        function saveData() {
            localStorage.setItem('minterAppData', JSON.stringify(appData));
        }

        function loadData() {
            const savedData = localStorage.getItem('minterAppData');
            if (savedData) {
                appData = JSON.parse(savedData);
            }
        }
        
        // --- 3D Background with Three.js ---
        let scene, camera, renderer, particles;
        
        function initThreeJS() {
            const threeContainer = document.getElementById('three-container');
            const width = threeContainer.clientWidth;
            const height = threeContainer.clientHeight;
            
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
            camera.position.z = 50;
            
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(width, height);
            threeContainer.appendChild(renderer.domElement);
            
            const geometry = new THREE.BufferGeometry();
            const vertices = [];
            for (let i = 0; i < 5000; i++) {
                vertices.push(
                    (Math.random() - 0.5) * 200,
                    (Math.random() - 0.5) * 200,
                    (Math.random() - 0.5) * 200
                );
            }
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            
            const material = new THREE.PointsMaterial({
                color: 0x888888,
                size: 0.5
            });
            
            particles = new THREE.Points(geometry, material);
            scene.add(particles);

            // Handle window resize
            window.addEventListener('resize', () => {
                const newWidth = threeContainer.clientWidth;
                const newHeight = threeContainer.clientHeight;
                camera.aspect = newWidth / newHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(newWidth, newHeight);
            });
        }
        
        function animate() {
            requestAnimationFrame(animate);
            particles.rotation.x += 0.0005;
            particles.rotation.y += 0.0005;
            renderer.render(scene, camera);
        }

        // --- Theme Toggle ---
        themeToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark');
            const isDark = document.body.classList.contains('dark');
            if (isDark) {
                themeIcon.classList.remove('fa-moon');
                themeIcon.classList.add('fa-sun');
            } else {
                themeIcon.classList.remove('fa-sun');
                themeIcon.classList.add('fa-moon');
            }
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });

        function loadTheme() {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.classList.add('dark');
                themeIcon.classList.remove('fa-moon');
                themeIcon.classList.add('fa-sun');
            } else {
                document.body.classList.remove('dark');
                themeIcon.classList.remove('fa-sun');
                themeIcon.classList.add('fa-moon');
            }
        }
        
        // --- Navigation and UI State ---
        /**
         * Hides all pages and shows the selected one.
         * @param {string} pageId - The ID of the page to show.
         */
        function showPage(pageId) {
            pages.forEach(page => page.classList.remove('active'));
            document.getElementById(pageId).classList.add('active');
            
            // Highlight active nav item
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            if (pageId !== 'welcome-page' && pageId !== 'signin-page') {
                document.querySelector(`#bottom-nav .nav-item[onclick="showPage('${pageId}')"]`).classList.add('active');
            }

            // Update page content based on pageId
            if (pageId === 'marketplace-page') {
                renderMarketplace();
            } else if (pageId === 'orders-page') {
                renderOrders();
                // Clear the 'new' flag on orders when the page is viewed
                appData.marketplace.orders.forEach(order => order.isNew = false);
                saveData();
                calculateNewOrdersCount();
                updateNewOrderIcon();
            } else if (pageId === 'profile-page') {
                renderProfile();
            }
        }
        
        /**
         * Renders the app UI after a successful sign-in.
         */
        function renderApp() {
            bottomNav.classList.remove('hidden');
            renderProfile(); // Pre-render profile page with user data
            showPage('home-page');
        }

        // --- New Orders Notification Logic ---
        function calculateNewOrdersCount() {
            const currentUser = appData.users.find(u => u.phone === currentUserPhone);
            const userFullName = currentUser ? currentUser.fullName : '';
            newOrdersCount = appData.marketplace.orders.filter(order => order.minter === userFullName && order.isNew).length;
        }

        function updateNewOrderIcon() {
            if (newOrdersCount > 0) {
                newOrdersBadge.textContent = newOrdersCount;
                newOrdersBadge.classList.remove('hidden');
            } else {
                newOrdersBadge.classList.add('hidden');
            }
        }
        
        // --- Authentication ---
        signinForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const phoneNumber = phoneNumberInput.value.trim();
            handleSignin(phoneNumber);
        });

        /**
         * Handles user sign-in/sign-up.
         * @param {string} phone - The phone number entered by the user.
         */
        function handleSignin(phone) {
            let user = appData.users.find(u => u.phone === phone);
            
            if (!user) {
                // Sign up new user
                user = { phone, fullName: '', email: '', profilePhoto: null, portfolioUrl: '' };
                appData.users.push(user);
                saveData();
            }

            currentUserPhone = user.phone;
            profilePhoneInput.value = currentUserPhone; // Update phone input
            signinMessage.classList.add('hidden');
            signinForm.reset();
            
            setTimeout(() => {
                renderApp();
            }, 1500);
        }

        /**
         * Handles user logout.
         */
        function handleLogout() {
            currentUserPhone = null;
            bottomNav.classList.add('hidden');
            showPage('signin-page');
            profileForm.reset();
        }

        // --- Marketplace Rendering ---
        /**
         * Renders the marketplace sections (Minters and Purchased) with data from appData.
         */
        function renderMarketplace() {
            mintersList.innerHTML = '';
            purchasedList.innerHTML = '';

            // Render Minters
            appData.marketplace.minters.forEach(minter => {
                mintersList.innerHTML += `
                    <div class="p-4 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md space-y-3">
                        <p class="text-lg font-semibold">${minter.name}</p>
                        <p class="text-gray-600 dark:text-gray-400">${minter.skill} for ${minter.hour}hr</p>
                        <div class="flex flex-col items-start space-y-2 sm:flex-row sm:items-center sm:justify-between sm:space-y-0">
                            <span class="text-lg font-semibold">$${minter.price}</span>
                            <button class="bg-black text-white px-6 py-1 lg:px-8 lg:py-2 rounded-md font-semibold border border-white hover:bg-gray-800 dark:hover:bg-white dark:hover:text-black transition-colors" onclick="openBuyModal('${minter.skill}', ${minter.price}, '${minter.name}')">Buy</button>
                        </div>
                        ${minter.portfolioUrl ? `<p class="text-sm text-gray-500 mt-2">Portfolio: <a href="${minter.portfolioUrl}" target="_blank" class="text-blue-600 dark:text-blue-400 hover:underline">${minter.portfolioUrl}</a></p>` : ''}
                    </div>
                `;
            });

            // Render Purchased
            const currentUser = appData.users.find(u => u.phone === currentUserPhone);
            const userPurchased = appData.marketplace.purchased.filter(item => item.buyerPhone === currentUserPhone);
            
            if (userPurchased.length === 0) {
                purchasedList.innerHTML = `<p class="text-gray-500 col-span-2">You haven't purchased any skills yet.</p>`;
            } else {
                 userPurchased.forEach(item => {
                    purchasedList.innerHTML += `
                        <div class="p-4 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md space-y-3">
                            <p class="text-lg font-semibold">${item.skill}</p>
                            <p class="text-gray-600 dark:text-gray-400">Provider: ${item.originalMinter} | Price: $${item.price}</p>
                            <div class="flex flex-col items-start space-y-2 sm:flex-row sm:items-center sm:justify-between sm:space-y-0">
                                <button class="bg-black text-white px-6 py-1 lg:px-8 lg:py-2 rounded-md font-semibold border border-white hover:bg-gray-800 dark:hover:bg-white dark:hover:text-black transition-colors" onclick="openOrderModal('${item.skill}', ${item.price}, '${item.originalMinter}')">Order</button>
                                <button class="bg-white text-black px-6 py-1 lg:px-8 lg:py-2 rounded-md font-semibold border border-white hover:bg-gray-200 dark:hover:bg-gray-700 dark:hover:text-white transition-colors" onclick="openSellModal('${item.skill}', ${item.price})">Sell</button>
                            </div>
                        </div>
                    `;
                });
            }
        }

        // --- Orders Page Rendering ---
        /**
         * Renders the orders page sections (Minted and Orders) with data from appData.
         */
        function renderOrders() {
            mintedList.innerHTML = '';
            ordersList.innerHTML = '';
            
            const currentUser = appData.users.find(u => u.phone === currentUserPhone);
            if (!currentUser) {
                return;
            }
            const userFullName = currentUser.fullName;

            // Render Minted
            const userMintedSkills = appData.marketplace.minted.filter(item => item.name === userFullName);
            if (userMintedSkills.length === 0) {
                mintedList.innerHTML = `<p class="text-gray-500 col-span-2">No skills minted yet. Go to Profile to mint one!</p>`;
            } else {
                userMintedSkills.forEach(item => {
                    mintedList.innerHTML += `
                        <div class="p-4 bg-gray-200 dark:bg-gray-800 rounded-lg shadow-md space-y-3">
                            <p class="text-lg font-semibold">${item.skill}</p>
                            <p class="text-gray-600 dark:text-gray-400">Status: ${item.status}</p>
                            <div class="flex flex-col items-start space-y-2 sm:flex-row sm:items-center sm:justify-between sm:space-y-0">
                                <span class="text-lg font-semibold">$${item.price}</span>
                                ${item.status === 'Published' ?
                                    `<button class="bg-red-600 text-white px-6 py-1 lg:px-8 lg:py-2 rounded-md font-semibold hover:bg-red-700 transition-colors" onclick="cancelMintedSkill('${item.id}')">Cancel</button>` :
                                    `<button class="bg-gray-500 text-gray-300 px-6 py-1 lg:px-8 lg:py-2 rounded-md font-semibold cursor-not-allowed">Cancelled</button>`
                                }
                            </div>
                        </div>
                    `;
                });
            }

            // Render Orders (only for skills minted by the current user)
            const receivedOrders = appData.marketplace.orders.filter(order => order.minter === userFullName);

            if (receivedOrders.length === 0) {
                ordersList.innerHTML = `<p class="text-gray-500 col-span-full">No incoming orders yet for your minted skills.</p>`;
            } else {
                receivedOrders.forEach(order => {
                    ordersList.innerHTML += `
                        <div class="space-y-3 p-4 border border-gray-700 rounded-md">
                            <p class="text-lg font-semibold">Skill: ${order.skill}</p>
                            <p class="text-gray-400">Price: $${order.price}</p>
                            <p class="text-gray-400">Bought by: ${order.buyer}</p>
                        </div>
                    `;
                });
            }
        }

        // --- Profile Rendering ---
        /**
         * Renders the profile page with current user's data.
         */
        function renderProfile() {
            const currentUser = appData.users.find(u => u.phone === currentUserPhone);
            if (currentUser) {
                profileFullNameInput.value = currentUser.fullName || '';
                profilePhoneInput.value = currentUser.phone;
                profileEmailInput.value = currentUser.email || '';
                profilePortfolioUrlInput.value = currentUser.portfolioUrl || '';

                if (currentUser.profilePhoto) {
                    profilePhotoPreview.src = currentUser.profilePhoto;
                    profilePhotoPreview.classList.remove('hidden');
                    profilePhotoPlusIcon.classList.add('hidden');
                } else {
                    profilePhotoPreview.src = '';
                    profilePhotoPreview.classList.add('hidden');
                    profilePhotoPlusIcon.classList.remove('hidden');
                    profilePhotoPlusIcon.textContent = '+';
                }
            }
            
            profileMessage.classList.add('hidden');
            profileMessage.textContent = '';
        }

        /**
         * Handles minting a new skill from the profile page.
         * @param {Event} event - The form submission event.
         */
        function handleMintSkill(event) {
            event.preventDefault();
            const fullName = profileFullNameInput.value.trim();
            const email = profileEmailInput.value.trim();
            const skill = profileSkillInput.value.trim();
            const price = parseFloat(profileSkillPriceInput.value.trim());
            const hour = parseFloat(profileSkillHourInput.value.trim());
            const portfolioUrl = profilePortfolioUrlInput.value.trim();

            if (!fullName || !email || !skill || isNaN(price) || isNaN(hour)) {
                profileMessage.textContent = 'Please fill in all required fields (Full Name, Email, Skill, Price, Hour).';
                profileMessage.classList.remove('hidden', 'text-green-500');
                profileMessage.classList.add('text-red-500');
                return;
            }

            const currentUser = appData.users.find(u => u.phone === currentUserPhone);
            if (currentUser) {
                currentUser.fullName = fullName;
                currentUser.email = email;
                currentUser.portfolioUrl = portfolioUrl;
            }

            const newSkillId = 'skill' + Date.now();

            const newMintedSkill = {
                id: newSkillId,
                name: fullName,
                skill: skill,
                price: price,
                hour: hour,
                status: 'Published'
            };

            const newMinterSkill = {
                id: newSkillId,
                name: fullName,
                skill: skill,
                price: price,
                hour: hour,
                portfolioUrl: portfolioUrl
            };

            appData.marketplace.minted.push(newMintedSkill);
            appData.marketplace.minters.push(newMinterSkill);
            saveData();

            profileMessage.textContent = `Skill "${skill}" minted successfully!`;
            profileMessage.classList.remove('hidden', 'text-red-500');
            profileMessage.classList.add('text-green-500');

            profileSkillInput.value = '';
            profileSkillPriceInput.value = '';
            profileSkillHourInput.value = '';
            profilePortfolioUrlInput.value = '';

            renderMarketplace();
            renderOrders();
        }

        /**
         * Handles canceling a published skill.
         * @param {string} skillId - The ID of the skill to cancel.
         */
        function cancelMintedSkill(skillId) {
            // Find and remove from minted list
            const mintedSkillIndex = appData.marketplace.minted.findIndex(skill => skill.id === skillId);
            if (mintedSkillIndex !== -1) {
                appData.marketplace.minted.splice(mintedSkillIndex, 1);
            }

            // Find and remove from minters list
            const minterSkillIndex = appData.marketplace.minters.findIndex(skill => skill.id === skillId);
            if (minterSkillIndex !== -1) {
                appData.marketplace.minters.splice(minterSkillIndex, 1);
            }
            
            saveData();
            renderOrders();
            renderMarketplace();

            profileMessage.textContent = 'Skill cancelled successfully!';
            profileMessage.classList.remove('hidden', 'text-red-500');
            profileMessage.classList.add('text-green-500');
            setTimeout(() => profileMessage.classList.add('hidden'), 2000);
        }

        profileForm.addEventListener('submit', handleMintSkill);

        // --- Profile Photo Upload Handler ---
        profilePhotoUpload.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    profilePhotoPreview.src = e.target.result;
                    profilePhotoPreview.classList.remove('hidden');
                    profilePhotoPlusIcon.classList.add('hidden');

                    const currentUser = appData.users.find(u => u.phone === currentUserPhone);
                    if (currentUser) {
                        currentUser.profilePhoto = e.target.result;
                        saveData();
                        profileMessage.textContent = 'Profile photo updated!';
                        profileMessage.classList.remove('hidden', 'text-red-500');
                        profileMessage.classList.add('text-green-500');
                        setTimeout(() => profileMessage.classList.add('hidden'), 2000);
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        // --- Buy Modal Functions ---
        function openBuyModal(skill, price, minterName) {
            buyModal.dataset.minterName = minterName;
            buyForm.classList.remove('hidden');
            buyStatus.classList.add('hidden');
            buyStatusMessage.textContent = '';
            buyPayButton.disabled = false;
            buyPayButton.textContent = 'Pay with Chapa';

            const currentUser = appData.users.find(u => u.phone === currentUserPhone);
            if (currentUser) {
                buyerNameInput.value = currentUser.fullName || '';
                buyerEmailInput.value = currentUser.email || '';
                buyerPhoneInput.value = currentUser.phone;

                buyerNameInput.readOnly = !!currentUser.fullName;
                buyerEmailInput.readOnly = !!currentUser.email;
                buyerPhoneInput.readOnly = true;

                buyerNameInput.classList.toggle('bg-gray-700', !!currentUser.fullName);
                buyerNameInput.classList.toggle('cursor-not-allowed', !!currentUser.fullName);
                buyerEmailInput.classList.toggle('bg-gray-700', !!currentUser.email);
                buyerEmailInput.classList.toggle('cursor-not-allowed', !!currentUser.email);
                buyerPhoneInput.classList.add('bg-gray-700', 'cursor-not-allowed');
            } else {
                buyerNameInput.value = '';
                buyerEmailInput.value = '';
                buyerPhoneInput.value = '';
                buyerNameInput.readOnly = false;
                buyerEmailInput.readOnly = false;
                buyerPhoneInput.readOnly = false;
                buyerNameInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
                buyerEmailInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
                buyerPhoneInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
            }
            modalSkill.textContent = skill;
            modalPrice.textContent = price;
            buyModal.classList.add('show');
        }

        function closeBuyModal() {
            buyModal.classList.remove('show');
            buyModal.dataset.minterName = '';
            buyerNameInput.readOnly = false;
            buyerEmailInput.readOnly = false;
            buyerPhoneInput.readOnly = false;
            buyerNameInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
            buyerEmailInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
            buyerPhoneInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
        }

        function processBuyPayment() {
            const name = buyerNameInput.value.trim();
            const email = buyerEmailInput.value.trim();
            const phone = buyerPhoneInput.value.trim();
            const skill = modalSkill.textContent;
            const price = parseFloat(modalPrice.textContent);
            const minterName = buyModal.dataset.minterName;

            if (!name || !email || !phone) {
                buyStatusMessage.textContent = 'Please enter your name, email, and phone number.';
                buyStatusMessage.classList.remove('text-green-400', 'text-red-400');
                buyStatusMessage.classList.add('text-yellow-400');
                buyForm.classList.add('hidden');
                buyStatus.classList.remove('hidden');
                document.getElementById('closeBuyStatusButton').classList.remove('hidden');
                return;
            }

            buyPayButton.disabled = true;
            buyPayButton.textContent = 'Processing...';
            buyStatusMessage.textContent = 'Redirecting to Chapa for payment...';
            buyStatusMessage.classList.remove('text-green-400', 'text-red-400', 'text-yellow-400');
            buyStatusMessage.classList.add('text-gray-400');
            buyForm.classList.add('hidden');
            buyStatus.classList.remove('hidden');
            document.getElementById('closeBuyStatusButton').classList.add('hidden');

            setTimeout(() => {
                buyStatusMessage.textContent = 'Payment successful! Your purchase is complete.';
                buyStatusMessage.classList.remove('text-gray-400', 'text-yellow-400');
                buyStatusMessage.classList.add('text-green-400');
                document.getElementById('closeBuyStatusButton').classList.remove('hidden');
                buyPayButton.disabled = false;
                buyPayButton.textContent = 'Pay with Chapa';

                const newPurchase = {
                    id: 'p' + Date.now(),
                    skill: skill,
                    price: price,
                    hour: 2,
                    originalMinter: minterName,
                    buyerPhone: currentUserPhone
                };
                appData.marketplace.purchased.push(newPurchase);

                const newOrder = {
                    id: 'o' + Date.now(),
                    skill: skill,
                    price: price,
                    buyer: name,
                    minter: minterName,
                    isNew: true
                };
                appData.marketplace.orders.push(newOrder);

                saveData();
                renderMarketplace();
                renderOrders();
                calculateNewOrdersCount();
                updateNewOrderIcon();
            }, 2000);
        }

        // --- Sell Modal Functions ---
        function openSellModal(skillName = '', price = '') {
            sellForm.classList.remove('hidden');
            sellStatus.classList.add('hidden');
            sellStatusMessage.textContent = '';
            sellSubmitButton.disabled = false;
            sellSubmitButton.textContent = 'List for Sale';
            sellSkillNameInput.value = skillName;
            sellPriceInput.value = price;
            sellDescriptionInput.value = '';
            sellModal.classList.add('show');
        }

        function closeSellModal() {
            sellModal.classList.remove('show');
        }

        function processSell() {
            const skillName = sellSkillNameInput.value.trim();
            const price = sellPriceInput.value.trim();
            const description = sellDescriptionInput.value.trim();

            if (!skillName || !price) {
                sellStatusMessage.textContent = 'Please enter a skill name and price.';
                sellStatusMessage.classList.remove('text-green-400', 'text-red-400');
                sellStatusMessage.classList.add('text-yellow-400');
                sellForm.classList.add('hidden');
                sellStatus.classList.remove('hidden');
                document.getElementById('closeSellStatusButton').classList.remove('hidden');
                return;
            }

            sellSubmitButton.disabled = true;
            sellSubmitButton.textContent = 'Listing...';
            sellStatusMessage.textContent = 'Listing your skill for sale...';
            sellStatusMessage.classList.remove('text-green-400', 'text-red-400', 'text-yellow-400');
            sellStatusMessage.classList.add('text-gray-400');
            sellForm.classList.add('hidden');
            sellStatus.classList.remove('hidden');
            document.getElementById('closeSellStatusButton').classList.add('hidden');

            setTimeout(() => {
                sellStatusMessage.textContent = `"${skillName}" listed for $${price} successfully!`;
                sellStatusMessage.classList.remove('text-gray-400', 'text-yellow-400');
                sellStatusMessage.classList.add('text-green-400');
                document.getElementById('closeSellStatusButton').classList.remove('hidden');
                sellSubmitButton.disabled = false;
                sellSubmitButton.textContent = 'List for Sale';

                const currentUser = appData.users.find(u => u.phone === currentUserPhone);
                const newMintedSkill = {
                    id: 'mt' + Date.now(),
                    name: currentUser.fullName || 'You',
                    skill: skillName,
                    price: parseFloat(price),
                    hour: 2,
                    status: 'Published'
                };
                appData.marketplace.minted.push(newMintedSkill);
                
                const newMinterSkill = {
                    id: newMintedSkill.id,
                    name: currentUser.fullName || 'You',
                    skill: skillName,
                    price: parseFloat(price),
                    hour: 2,
                    portfolioUrl: currentUser.portfolioUrl || ''
                };
                appData.marketplace.minters.push(newMinterSkill);

                // Assuming the user is selling a skill they previously purchased, remove it from the purchased list.
                const purchasedIndex = appData.marketplace.purchased.findIndex(item => item.skill === skillName);
                if (purchasedIndex !== -1) {
                    appData.marketplace.purchased.splice(purchasedIndex, 1);
                }

                saveData();
                renderMarketplace();
                renderOrders();
            }, 2000);
        }

        // --- Order Modal Functions ---
        function openOrderModal(skillNeeded, desiredPrice, minterName) {
            orderForm.classList.remove('hidden');
            orderStatus.classList.add('hidden');
            orderStatusMessage.textContent = '';
            orderSubmitButton.disabled = false;
            orderSubmitButton.textContent = 'Place Order';
            orderRequirementsInput.value = '';

            orderSkillNeededInput.value = skillNeeded;
            orderSkillNeededInput.readOnly = true;
            orderSkillNeededInput.classList.add('bg-gray-700', 'cursor-not-allowed');

            orderDesiredPriceInput.value = desiredPrice;
            orderDesiredPriceInput.readOnly = true;
            orderDesiredPriceInput.classList.add('bg-gray-700', 'cursor-not-allowed');

            orderSkillProviderInput.value = minterName;
            orderSkillProviderInput.readOnly = true;
            orderSkillProviderInput.classList.add('bg-gray-700', 'cursor-not-allowed');

            orderModal.classList.add('show');
        }

        function closeOrderModal() {
            orderModal.classList.remove('show');
            orderSkillNeededInput.readOnly = false;
            orderSkillNeededInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
            orderDesiredPriceInput.readOnly = false;
            orderDesiredPriceInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
            orderSkillProviderInput.readOnly = false;
            orderSkillProviderInput.classList.remove('bg-gray-700', 'cursor-not-allowed');
        }

        function processOrder() {
            const skillNeeded = orderSkillNeededInput.value.trim();
            const desiredPrice = orderDesiredPriceInput.value.trim();
            const skillProvider = orderSkillProviderInput.value.trim();
            const requirements = orderRequirementsInput.value.trim();

            if (!skillNeeded || !desiredPrice || !skillProvider) {
                orderStatusMessage.textContent = 'Error: Missing order details. Please close and try again.';
                orderStatusMessage.classList.remove('text-green-400', 'text-yellow-400');
                orderStatusMessage.classList.add('text-red-400');
                orderForm.classList.add('hidden');
                orderStatus.classList.remove('hidden');
                document.getElementById('closeOrderStatusButton').classList.remove('hidden');
                return;
            }

            orderSubmitButton.disabled = true;
            orderSubmitButton.textContent = 'Placing...';
            orderStatusMessage.textContent = `Sending your order for "${skillNeeded}" to ${skillProvider}...`;
            orderStatusMessage.classList.remove('text-green-400', 'text-red-400', 'text-yellow-400');
            orderStatusMessage.classList.add('text-gray-400');
            orderForm.classList.add('hidden');
            orderStatus.classList.remove('hidden');
            document.getElementById('closeOrderStatusButton').classList.add('hidden');

            setTimeout(() => {
                orderStatusMessage.textContent = `Your order for "${skillNeeded}" has been sent to ${skillProvider} successfully!`;
                orderStatusMessage.classList.remove('text-gray-400', 'text-yellow-400');
                orderStatusMessage.classList.add('text-green-400');
                document.getElementById('closeOrderStatusButton').classList.remove('hidden');
                orderSubmitButton.disabled = false;
                orderSubmitButton.textContent = 'Place Order';
            }, 2000);
        }

        // --- Initialization ---
        document.addEventListener('DOMContentLoaded', () => {
            loadData();
            initThreeJS();
            animate();
            loadTheme();
            calculateNewOrdersCount();
            updateNewOrderIcon();
            // Start on the sign-in page as requested by the user
            showPage('signin-page');
        });
    </script>
</body>
</html>
